#include <pthread.h>
#include <jni.h>
#include <Socket/SocketClient.h>
#include "src/Unity/Vector3.hpp"
#include "src/Unity/Vector2.hpp"
#include "src/Unity/Unity.h"
#include "src/Unity/ESP.h"
#include "Includes/Logger.h"
#include "mm.h"
SocketClient client;

void startDaemon();
int startClient();
bool isConnected();
void stopClient();
bool initServer();
bool stopServer();

enum Mode {
    InitMode = 1,
    HackMode = 2,
    StopMode = 3,
	ESPMode = 4,
	
};

enum m_Features {
	g_aimAuto = 4,
	g_aimAtirar = 5,
	g_aimMirar = 6,
	g_aimAgachar = 7,
	g_espNames = 8,
	g_espAlerta = 9,
	g_espGranada = 10,
	g_telekill = 11,
	g_EspFire = 12,
	g_TelecarPro = 13,
	g_nightmode = 14,
	g_fly = 15,
	g_under = 16,
	g_medkitrun = 17,
    g_speedhack = 18,
	g_speedhack100x = 19,
	g_speedhack1000x = 20,
	
	g_func1 = 21,
    g_func2 = 22,
	g_xxx = 23,
	
};


struct Request {
    int Mode;
    bool m_IsOn;
    int ScreenWidth;
    int ScreenHeight;
};

struct PlayerData {
    float Distance;
    Vector3 Location;
    Vector3 HeadLocation;
	Vector3 PositionHip;
	Vector3 PositionDedoS;
	Vector3 PositionPeD;
	Vector3 PositionPeS;
	Vector3 PositionRShoulder;
	Vector3 PositionLShoulder;
	Vector3 PositionRightHand;
	Vector3 PositionLeftHand;
	Vector3 PositionToe;
	Vector3 PositionRJ;
	Vector3 PositionLJ;
	Vector3 CenterWS;
	float Health;
	Vector3 HeadRaw;
	
};

struct Response {
    bool Success;
    int PlayerCount;
    PlayerData Players[50];
};

int startClient(){
    client = SocketClient();
    if(!client.Create()){
        //LOGE("CE:1");
        return -1;
    }
    if(!client.Connect()){
        // LOGE("CE:2");
        return -1;
    }
    if(!initServer()){
        //LOGE("CE:3");
        return -1;
    }
    return 0;
}

bool isConnected(){
    return client.connected;
}

void stopClient() {
    if(client.created && isConnected()){
        stopServer();
        client.Close();
    }
}

bool initServer() {
    Request request{Mode::InitMode};
    int code = client.send((void*) &request, sizeof(request));
    if(code > 0) {
        Response response{};
        size_t length = client.receive((void*) &response);
        if(length > 0){
            return response.Success;
        }
    }
    return false;
}

bool stopServer(){
    Request request{Mode::StopMode};
    int code = client.send((void*) &request, sizeof(request));
    if(code > 0) {
        Response response{};
        size_t length = client.receive((void*) &response);
        if(length > 0){
            return response.Success;
        }
    }
    return false;
}

void SendFeatuere(int32_t number, bool ftr) {
    Request request{number, ftr};
    int code = client.send((void*) &request, sizeof(request));
    if (code > 0) {
        Response response{};
        size_t length = client.receive((void*) &response);
        if (length > 0) {
             ;
        }
    }
}
Response getData(int screenWidth, int screenHeight){

    Request request{Mode::ESPMode, true,screenWidth,screenHeight};
    int code = client.send((void*) &request, sizeof(request));
    if(code > 0){
        Response response{};
        size_t length = client.receive((void*) &response);
        if(length > 0){
            return response;
        }
    }
    Response response{false, 0};
    return response;
}



extern "C" {
    
JNIEXPORT jstring JNICALL
Java_com_musk_injectv1_Floater_Title(JNIEnv *env, jobject thiz) {
    return env->NewStringUTF(("M U S K M O D S"));
}
JNIEXPORT jboolean JNICALL
Java_com_musk_injectv1_Floater_IsConnected(JNIEnv *env, jobject thiz) {
     return client.connected;
}


JNIEXPORT jstring JNICALL
Java_com_musk_injectv1_Floater_Heading(JNIEnv *env, jobject thiz) {
    return env->NewStringUTF(OBFUSCATE("üîê Username: <font color='red'> Musk  \n </font><br> Validity: <font color='red'> 99 Dias | 99/99/9999" ));

}

JNIEXPORT jstring
JNICALL
Java_com_musk_injectv1_Floater_Title3(JNIEnv *env, jobject thiz) {


    //Use https://www.base64encode.org/ to encode your image to base64
    return env->NewStringUTF(("iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAMAAAD04JH5AAABm1BMVEU9s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s54AAAA9s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s549s57LJ3dGAAAAiHRSTlMWjcCtVZukaiCYb6puYQXMvr27tGIRWq+3i5bwzu7qiTw3/nMc3q4S2atKfBvt85WD6SLkgkPQDoa1Qpw4W7y4w8gB0gtsws0GAITrPaVHygPFv14f5oV2FVCx9i/xFA/W7FOI/BindOAZ0wy6BMvlHmbRCms0+5FA1A1Y+jPXELbJAsT5MiHoQ2BqTgAABe9JREFUeNrFm/lf2zYYxr27O7ts604GHgQGpJCOch9LljHmlwALVwl3gQIDAy14AQYFdjCqP3vUFJBsSX5lOx+9vxksPd9PZEmPXkkGhImOUl/rcFe2vTZ/fp6vbc92Dbf2lTpCVWWoFugfqRqbJNyYHKsa6S8rgNU9OPqcSOP56INuq0wAvekmgoqmdG/8ABOpeqIQ9amJWAFKddVEMarrSrEBDGVIqMgMxQLQNkBCx0BbZIBkA4kUDclIANs1zSRiNNdshwcwN0kMsWmGBCh0VpNYorqzEAYgmZXUWZntmZo25y4WLGvhYs6cnurJVkpezybVARqXRLU9Ti8XeSWKy+nHojJLjYoAuRX+z/8kM74qa9HV8cwTfjOs5FQArDVuLXvrG8Ejy8b6HrfwmoUHsLd4NYya2AnGHOWV37KxAMUdTvHTaZVJdvqUU8VOEQfwjDPvTe4W1HxGYZfjWuqfYQCKfv35lKPutZzUvJ+gGAxg+37//YNiKLcHxYN9XyvYQQCW7/tbOoTQcegbTLYsOUDO1/82WyBCtPhmk7WcFGDF+/7MEUSKoxlvjSsygEbv+PcoBxEj98g7JjaKAZKeJps9hhjieNbzUSVFAAXP/PfwBGKJk4eeubEgAOj06N+HmOK+h6CTD2CyH8DsCcQWJ2wrVJs8gG1PjzmGGOPY07e3OQA1nu8fYg1PX6jxAyRZ/zuTixcgx44HzUkfAOv/N48g5jhiW7jBC9DGdtUWiD1a2EGmzQPArL/2D6EMccjMjQMswBBDdwBliQNGZIgBYNa/88XyABQZh5KhAUoMWwrKFClGpkQB1DH+zykXgMP4xLpbgAlmEN6FssUuMyBP3AAwP82p1P+edWb/+kPwxj+/ZP6t+l7qlU99Te0CMD5Y6v//e+ouUbgq9o8v//fiO+l6gfHI1wC9zPpHqv/t1UsVHAL7lZv4RkrArJl6XwGk6T+aCH0egX3jZqQEJq319RWARecf91D6fgKbclNSAnrl2mS5AN001DpO30tgM25ORrBOv9jtAgzS6/8NpD5LYHvcpIRgg84fDLoAo/7xkdf/nnoN/i2B7cvm/LAgrCjDfvEG9NP573FhuQf+xe41gc3JJn0lrGiczq33XwKM0OXE+ZcviYiAp0/GxFkc+rWRS4AqOv8k/ni4SZuXBFx98oW4JjqTVXUJMEY9p8XFPucmfn69x9cnn4lrSjM/lAH0DLUs6cCfcoUq+PqfSDztMj3zgtFBl5M5ESeBz41mbZkvod/sMGgvUimfzROx6APQOdWS0UcXhFgIAvSBbrU+o5V66oE4CIL0oYd6udUYpp6mIAaCQH2Yot4eNrqwXgRJEKzPuJIuI4v0AkgChD7jCbJGO/U0B1EJMPowRxVoN2qppwuISIDShwuqRK2Rp54WIBoBTh8WqCJ545x6Qu46Ox9H0geLKnMeBmDxJyKYmcIAqDeBSB9NwDaB8kco1ifk7j31j1C1G8r0LwnOlLuh4kAk18cRsAOR2lAcpE/IzpniUKw0GQXrYwjYyUhlOsboE/LbotJ0rGBIcPrBBKwhwVsyrD4hfy8qWDK0KcXrBxB4TCnWluf4E0CCPzMNFNC2HLsw+ZCv7wjmxg/wCxPk0myYry+anRP4pRlycfq+QF9AUIFfnCKX5++J9PkE7+KX58gEhfWnSJ9H0LSKT1BgUzR3fhfp+wmaTZUUDTZJxRIkHLFPlOjzklToNB1NkHDETlWmz0vT4ROVtwQJR+yVpfq8RKVCqvaaIOGI3bpUn5+qVUhW3/nZ3dPj7ig4rrfJm+rJapV0/UfvvP3Wm8Iu/sbrrxlh0vXaNyy0b9no37TSvm2nf+NS+9at/s1r7dv3+g8waD/Cof8Qi/ZjPPoPMuk/yqX9MJv+43z6DzTqP9Kp/VCr/mO9+g826z/arf9wu/7j/fovOOi/4gHaL7mA/ms++i86gfarXqD/shtov+7nrpn0Xnh0V656r3y6+QO9l17dLI7ea79u6L34fDVH6b36fRVaL7/fRIzX//8HCgRorXd/+e8AAAAASUVORK5CYII="));		
	}

JNIEXPORT jstring
JNICALL
Java_com_musk_injectv1_Floater_Title2(JNIEnv *env, jobject thiz) {
    

    //Use https://www.base64encode.org/ to encode your image to base64
    return env->NewStringUTF((""));

			}

			
				

JNIEXPORT jobjectArray JNICALL
Java_com_musk_injectv1_Floater_getFeatureList(JNIEnv *env, jobject activityObject) {
    jobjectArray ret;

    const char *features[] = {
    
     
		
		    ("Toggle_ACTIVATE ALL"),//1
            
		
		   ("Category_A I M B O T"),//0
            
            ("Toggle_Aim- Auto"),//1
            
           ("Toggle_Aim - Fire"),//2
            
            ("Toggle_Aim - Scope"),//3
            
            ("Toggle_Aim - Crouch"),//4
            
            ("SeekBar_Aim - Fov_0_360"),//5
			
			("Category_E S P M A T E R I A L"),//6
			
            ("Toggle_ESP-INFO"),//7
           
			("Toggle_ESP FIRE"),//8
			
			("Toggle_ESP-GRENADE"),//9
			
			("Category_T E L E K I L L"),//10
	       
			("Toggle_TELEKILL-PLAYER"),//11
		
            ("Toggle_TELEKILL-CAR"),//12
			
			("Category_C A R H A C K S"),//13
			
	       ("Toggle_FLY-CAR"),//14
            
            ("Toggle_UNDERGROUND CAR"),//15
			
		    ("Category_E X T R A"),//16
       
	       ("Toggle_NIGHT-MODE"),//17
			
			 ("Toggle_MEDKIT RUNNING"),//18
             
             ("Toggle_SPEED 5x "),
			 
			 ("Toggle_SPEED 100X "),
		
		 ("Category_ESP DRAW [ULTRA GRAPHICS]"),//16
       
			 
	        ("Toggle_ESP LINE"),
			
			("Toggle_ESP MOCO"),
			
			("Toggle_ESP BOX"),
			
			("Toggle_ESP SKELETON"),
	
		   ("Toggle_ESP DISTANCE"),
				
				
			("Toggle_ESP HEALTH"),
			
				
			
		    ("SeekBar_ESP COLOR_0_10"),
		
    };

    int Total_Feature = (sizeof features / sizeof features[0]);

    ret = (jobjectArray) env->NewObjectArray(Total_Feature, env->FindClass("java/lang/String"), env->NewStringUTF(""));
    int i;
    for (i = 0; i < Total_Feature; i++)
    env->SetObjectArrayElement(ret, i, env->NewStringUTF(features[i]));
    return (ret);
}

bool aimAuto = false;
bool aimAtirar = false;
bool aimMirar = false;
bool aimAgachar = false;
bool espNames = false;
bool espAlerta = false;
bool espGranada = false;
bool TelecarPro = false;
bool EspFire = false;
bool telekill = false;
bool enableFov = true;
bool nightmode = false;
float aimFov = 0.0f;
bool fly = false;
bool under = false;
bool medkitrun = false;

bool EspDist = false;
bool FlyAltura = false;
bool Gravidade = false;

bool verificacao = false;

bool Speed100x = false;

bool Speed = false;


bool feature9 = false;
bool feature10 = false;
float Fov_Aim = 0.998f;
    int semihs = 0;
    bool hs100 = false;
    bool aimFire = false;
    bool aimScope = false;
    bool aimBotFov = false;
    bool hs70 = false;
    bool aimBody = false;
    bool aimAgachado = false;
    bool aimbotauto = false;
    bool espnear = false;
    bool Gravity = false;

    bool MedKitRunning = false;
    bool MedKitRunning2 = false;
    bool teleKill = false;
    bool ghost = false;
    bool modcorHd = false;
    bool fakeName = false;
    bool espNear = false;
    
    bool GrenadeLine = false;
    bool espFire = false;
	bool UseFOV = false;
	bool FovCount2 = false;
	bool UseMxD = false;
	bool MxDis = false;
	bool UseScope = false;
	bool UseFiring = false;
bool AimTiro = false;
bool AimMira = false;
bool UseAgachado = false;
bool UseAimFov = false;
bool UseAimFov2 = false;
bool UseCaidos = true;
bool Derrubados = false;
bool AimVisible = false;
bool UseVisible = false;
int aimspot = 0;
float AimFovCount2 = 0;
bool Wall = false;
bool EspAlert = false;

bool EspM = false;
bool EspLine = false;
bool EspBox = false;
bool EspCross = false;
bool EspMoco = false;
bool ESP360 = false;
bool EspAlvo = false;
bool EspPopup = false;
bool Distancia3 = false;
float largura = 1920;
float altura = 1080;
bool EspEsqueleto = false;
bool EspAliados = false;
bool ESPFPS = false;
bool EspPopup2 = false;
bool removerconta = false;
bool fakename = false;
bool medkit = false;
bool WallPedra = false;
bool Pedra = false;
bool GhostHack = false;
bool modonoite = false;
bool mapahd = false;
bool caidos = false;
bool isbot = false;
bool espsexo = false;
bool espcolete = false;

bool off = false;
bool Ghost = false;
bool FlySpeed = false;
bool doublegun = false;
bool speed = false;
bool active = true;
bool FlyHeight = false;
int SpeedInt = 0;
bool NoRecoil = false;
bool Corridinha50x = false;
bool autoRevive = false;
bool Value = false;
bool CarSpeed = false;
bool launched = false;
int m_gSWidth = 1920;
int m_gSHeight = 1080;
bool AutoFire = false;

int aimdist = 10;

bool EspSkeleton = false;

Color    changecolor;

 bool ChamsOn = true;

bool espGrenade = false;

bool espcount = false;

bool EspHealth = false;
bool xxx = false;
JNIEXPORT void  JNICALL
Java_com_musk_injectv1_Floater_Changes(JNIEnv *env, jobject activityObject, jint feature, jint Value) {
    
    switch (feature) {
        
      case 0:
            xxx = ! xxx;
          SendFeatuere(m_Features::g_xxx, xxx);
			
			break;
		

			
		case 1:
            LOGI("MENU AIMBOT");
            break;

        case 2:
            aimAuto = !aimAuto;
			SendFeatuere(m_Features::g_aimAuto, aimAuto);
            break;
            
        case 3:
            aimAtirar = !aimAtirar;
			SendFeatuere(m_Features::g_aimAtirar, aimAtirar);
            break;
            
        case 4:
            aimMirar = !aimMirar;
			SendFeatuere(m_Features::g_aimMirar, aimMirar);
            break;
            
        case 5:
            aimAgachar = !aimAgachar;
			SendFeatuere(m_Features::g_aimAgachar, aimAgachar);
            break;
            
        case 6:
            aimFov = Value;
            if(Value == 0) {
				aimFov = 0.0f;
			}
            break;
            
			
			
	    case 7:
            LOGI("MENU Esp Material");
            break;

           case 8:
            espNames = !espNames;
			SendFeatuere(m_Features::g_espNames, espNames);
            break;
			 
			case 9:
			EspFire = !EspFire;
			SendFeatuere(m_Features::g_EspFire, EspFire);
			break;
        
			
	     	case 10:
			espGranada = !espGranada;
			SendFeatuere(m_Features::g_espGranada, espGranada);
			break;
    
		
			case 11:
            LOGI("MENU telekill");
            break;
		
			case 12:
			telekill = !telekill;
			
			SendFeatuere(m_Features::g_telekill, telekill);
			break;
        
		
	     	case 13:
			TelecarPro = !TelecarPro;
			SendFeatuere(m_Features::g_TelecarPro, TelecarPro);
			break;
        
	
			
			case 14:
            LOGI("MENU Carhacks");
            break;
		
			
			case 15:
			fly = !fly;
			SendFeatuere(m_Features::g_fly, fly);
			break;
        
			case 16:
			under = !under;
			SendFeatuere(m_Features::g_under, under);
			break;
        
		
			case 17:
            LOGI("MENU Carhacks");
            break;
		
			
			case 18:
			nightmode = !nightmode;
			SendFeatuere(m_Features::g_nightmode, nightmode);
			break;
        
			
			case 19:
			medkitrun = !medkitrun;
			SendFeatuere(m_Features::g_medkitrun, medkitrun);
			break;
			
	       
            case 20:
            Speed = ! Speed;
            SendFeatuere(m_Features::g_speedhack, Speed);
            break;
			
			
			case 21:
            Speed100x= ! Speed100x;
            SendFeatuere(m_Features::g_speedhack100x, Speed100x);
            break;
			
	       
			
			case 23:
            EspDist= ! EspDist;
            SendFeatuere(m_Features::g_func1, EspDist);
            break;
			
	        case 24:
            EspMoco= ! EspMoco;
            SendFeatuere(m_Features::g_func2, EspDist);
			break;
			
			case 25:
            EspBox= ! EspBox;
            SendFeatuere(m_Features::g_func1, EspBox);
            break;
			
	        case 26:
            EspSkeleton= ! EspSkeleton;
            SendFeatuere(m_Features::g_func2, EspSkeleton);
			break;
			
		
			
			case 27:
				EspLine = ! EspLine;
	    SendFeatuere(m_Features::g_func2, EspLine);
				break;
			
			
			
			case 28:
				EspHealth = !EspHealth;
		SendFeatuere(m_Features::g_func2, EspHealth);
				break;
			
			case 29:
            if (Value == 0 ){
                changecolor = Color::Black();
            } else if(Value == 1 ){
                changecolor = Color::White();
            } else if(Value == 2 ){
                changecolor = Color::Green();
            } else if(Value == 3 ){
                changecolor = Color::Blue();
            } else if(Value == 4 ){
                changecolor = Color::Cyan();
            } else if(Value == 5 ){
                changecolor = Color::Red();
            } else if(Value == 6 ){
                changecolor = Color::Green();
            } else if(Value == 7 ){
                changecolor = Color::Purple();
            } else if(Value == 8 ){
                changecolor = Color::White();
            } else if(Value == 9 ){
                changecolor = Color::Red();
            } else if(Value == 10 ){
                changecolor = Color::Yellow();
            } else if(Value == 11 ){
                changecolor = Color::Magenta();
            }
            break;

			
		}
		
    }
}





ESP espOverlay;





void DrawESP(ESP esp, int screenWidth, int screenHeight) {
	esp.DrawText(Color::Yellow(), 0.6f, ("[ Musk Modder Injector version ]" ),
                 Vector3(screenWidth / 2,
                         screenHeight / 1.03 + 10.0f),  30.0f);

				if(xxx){	 
	
        esp.DrawCrosshair(Color(0, 0, 0, 255), Vector3(screenWidth / 2, screenHeight / 2), 75);

            // TESTE
    Response response = getData(screenWidth, screenHeight);

    if(response.Success){
        int count = response.PlayerCount;
        if(count >= 0){

            PlayerData localPlayer = response.Players[0];

            for(int i=1; i < count; i++){
                PlayerData player = response.Players[i];
             
				    Vector3 PositionHead = player.HeadLocation;
				
				    Vector3 HeadLocation = player.HeadLocation;
	     
					Vector3 PositionHip = player.PositionHip;
	
					Vector3 PositionDedoS = player.PositionDedoS;
	
					Vector3 PositionPeD = player.PositionPeD;
	
					Vector3 PositionPeS = player.PositionPeS;
	
					Vector3 PositionRShoulder = player.PositionRShoulder;
	
					Vector3 PositionLShoulder = player.PositionLShoulder;
	
					Vector3 PositionRightHand = player.PositionRightHand;
	
					Vector3 PositionLeftHand = player.PositionLeftHand;
	
					Vector3 PositionToe = player.PositionToe;
	
	
					Vector3 PositionRJ = player.PositionRJ;
	
					Vector3 PositionLJ = player.PositionLJ;
				
				    Vector3 CenterWS = player.CenterWS;
					
					Vector3 Head = player.HeadRaw;
					
					float vital = player.Health;
					
			  	float distance = Vector3::Distance(CenterWS, Head);
                                          
                                                       Vector3 End = PositionHead;
                                                       Vector3 End2 = PositionToe;

                                                       float boxWidth = static_cast<float>(
                                                               ((screenWidth -
                                                                 PositionRShoulder.X * 0.995) -
                                                                (screenWidth -
                                                                 PositionLShoulder.X * 1.005)) *
                                                               1.5);

                                                       float Tamanho = 0.0f;

                                                       if (distance > 10.0f) {
                                                           Tamanho = 10.0f;
                                                       } else if (distance < 20.0f) {
                                                           Tamanho = 0.0f;
                                                       }
                                                     
                                                       float boxHeight = ((screenHeight - End2.Y) -
                                                                          (screenHeight - End.Y + 1.0));
                                                       Rect PlayerRect(End2.X - (boxWidth / 2),
                                                                       (screenHeight - End.Y),
                                                                       boxWidth,
                                                                       boxHeight + Tamanho);

                                                 
					
					
					
				             if(EspDist){
                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth /
                                                                                     2), screenHeight/20),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHead.X)),
                                                                                    (screenHeight -
                                                                                     PositionHead.Y)));  }
        
			                                            if (EspMoco) {
                                                  
                                                               esp.DrawText(changecolor, 2, "‚©¢",
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHead.X)),
                                                                                    (screenHeight -
                                                                                     PositionHead.Y) -
                                                                                    30.0f),
                                                                           20);
                                                           }
														   
													   if (EspBox){
														   esp.DrawBox(changecolor, 4,
                                                                           PlayerRect);
                                                           } 
                                                       

							             if(EspLine) {
                                                float mScale = screenHeight / (float) 1080;
                                                char buffer[30];
                                                sprintf(buffer, "%.fM", distance);
                                               // esp.DrawBox(changecolor, 2.5, Rect(PlayerRect.x + (PlayerRect.width / 2) - (35 * mScale) + 12, PlayerRect.y + PlayerRect.height - (80 * mScale) + 71, + 40.0f + 2, 23.0f));
                                                esp.DrawText(changecolor, 1.1f, buffer,
                                                             Vector3(PlayerRect.x + (PlayerRect.width / 2),
                                                                     PlayerRect.y + PlayerRect.height + 12.5f), 16.3f);
                                            }   
											if(EspHealth) {
											float mScale = screenHeight / (float) 1080;
											 
										   	float maxHealth = 80.0f;
										  
											Color clr =  Color::Green();

                                              if (vital <= 25)
                                                    clr = Color(255, 0, 0);
                                                else if (vital <= 75)
                                                    clr = Color(255, 165, 0);
                                                else if (vital <= 120)
                                                    clr = Color(255, 255, 0);
                                                else
                                                    clr = Color(0, 255, 0);

                                                   esp.DrawBox(Color(0, 0, 0, 255), 3, Rect(PlayerRect.x - (35 * mScale), PlayerRect.y - (80 * mScale) + 35, 80 + 2, 9.0f)); // + 60 SCALING TO POINT ON HEAD. ACTUALLY + 35.
                                                   esp.DrawFilledRect(clr, Vector3(PlayerRect.x - (35 * mScale), PlayerRect.y - (80 * mScale) + 35), vital/2.5, 7.0f);  // + 60 SCALING TO POINT ON HEAD. ACTUALLY + 35.
												   
												   /////ORIGNAL HEALTH BAR
                                                   /*esp.DrawBox(clr, 3, Rect(PlayerRect.x - (35 * mScale), PlayerRect.y - (80 * mScale) + 35, vital, 3.0f));
                                                   esp.DrawBox(Color(0, 0, 0, 255), 3, Rect(PlayerRect.x - (35 * mScale), PlayerRect.y - (80 * mScale) + 35, 80.0f + 2, 5.0f));*/
											}
											

                                                       if (EspSkeleton) {
                                                 
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHip.X)),
                                                                                    (screenHeight -
                                                                                     PositionHip.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHead.X)),
                                                                                    (screenHeight -
                                                                                     PositionHead.Y)));
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionRShoulder.X)),
                                                                                    (screenHeight -
                                                                                     PositionRShoulder.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHead.X)),
                                                                                    (screenHeight -
                                                                                     PositionHead.Y)));
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionLShoulder.X)),
                                                                                    (screenHeight -
                                                                                     PositionLShoulder.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHead.X)),
                                                                                    (screenHeight -
                                                                                     PositionHead.Y)));
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionPeS.X)),
                                                                                    (screenHeight -
                                                                                     PositionPeS.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHip.X)),
                                                                                    (screenHeight -
                                                                                     PositionHip.Y)));
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionPeD.X)),
                                                                                    (screenHeight -
                                                                                     PositionPeD.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionHip.X)),
                                                                                    (screenHeight -
                                                                                     PositionHip.Y)));
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionDedoS.X)),
                                                                                    (screenHeight -
                                                                                     PositionDedoS.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionLShoulder.X)),
                                                                                    (screenHeight -
                                                                                     PositionLShoulder.Y)));
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionLeftHand.X)),
                                                                                    (screenHeight -
                                                                                     PositionLeftHand.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionLShoulder.X)),
                                                                                    (screenHeight -
                                                                                     PositionLShoulder.Y)));
                                                               esp.DrawLine(changecolor, 2,
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionRightHand.X)),
                                                                                    (screenHeight -
                                                                                     PositionRightHand.Y)),
                                                                            Vector3((screenWidth -
                                                                                     (screenWidth -
                                                                                      PositionRShoulder.X)),
                                                                                    (screenHeight -
                                                                                     PositionRShoulder.Y)));



                                                           
                    }                                   }
																		 }
        }
    }

        
}
					 				 
						 
						 



extern "C"
JNIEXPORT void JNICALL
Java_com_musk_injectv1_Floater_DrawOn(JNIEnv *env, jclass type, jobject espView, jobject canvas) {
    espOverlay = ESP(env, espView, canvas);
    
    if (espOverlay.isValid()){
        DrawESP(espOverlay, espOverlay.getWidth(), espOverlay.getHeight());
    }
}

	 


extern "C"
JNIEXPORT jint JNICALL
Java_com_musk_injectv1_RunnigTask_Init(JNIEnv *env, jclass type) {
	return startClient();
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_musk_injectv1_Floater_Stop(JNIEnv *env, jclass type) {
    stopClient();
}
